/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/main_CYCLES_graph_classification.py:350: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  num_classes = len(np.unique(np.array(dataset.train[:][1])))
/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/main_CYCLES_graph_classification.py:350: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  num_classes = len(np.unique(np.array(dataset.train[:][1])))
--- Logging error ---
Traceback (most recent call last):
  File "/afs/crc.nd.edu/user/p/psoga/.conda/envs/gnn/lib/python3.10/logging/__init__.py", line 1100, in emit
    msg = self.format(record)
  File "/afs/crc.nd.edu/user/p/psoga/.conda/envs/gnn/lib/python3.10/logging/__init__.py", line 943, in format
    return fmt.format(record)
  File "/afs/crc.nd.edu/user/p/psoga/.conda/envs/gnn/lib/python3.10/logging/__init__.py", line 678, in format
    record.message = record.getMessage()
  File "/afs/crc.nd.edu/user/p/psoga/.conda/envs/gnn/lib/python3.10/logging/__init__.py", line 368, in getMessage
    msg = msg % self.args
TypeError: not all arguments converted during string formatting
Call stack:
  File "/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/main_CYCLES_graph_classification.py", line 373, in <module>
    main(args)
  File "/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/main_CYCLES_graph_classification.py", line 365, in main
    train_val_pipeline(MODEL_NAME, dataset, params, net_params, dirs, args.config, config)
  File "/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/main_CYCLES_graph_classification.py", line 107, in train_val_pipeline
    logger.info('Time taken to convert to full graphs:',time.time()-st)
Message: 'Time taken to convert to full graphs:'
Arguments: (244.9765214920044,)
[I] Loading dataset CYCLES...
train, test, val sizes : 9000 10000 1000
[I] Finished loading.
[I] Data load time: 13.8675s
using 1 automata/automaton
using 1 automata/automaton
0it [00:00, ?it/s]0it [00:00, ?it/s]
Traceback (most recent call last):
  File "/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/main_CYCLES_graph_classification.py", line 373, in <module>
    main(args) 
  File "/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/main_CYCLES_graph_classification.py", line 365, in main
    train_val_pipeline(MODEL_NAME, dataset, params, net_params, dirs, args.config, config)
  File "/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/main_CYCLES_graph_classification.py", line 161, in train_val_pipeline
    epoch_train_loss, epoch_train_acc, optimizer = train_epoch(model, optimizer, device, train_loader, epoch, MODEL_NAME)
  File "/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/train/train_CYCLES_graph_classification.py", line 56, in train_epoch_sparse
    raise e
  File "/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/train/train_CYCLES_graph_classification.py", line 54, in train_epoch_sparse
    batch_scores = model.forward(batch_graphs, batch_x, batch_e, batch_graphs.ndata['pos_enc'])
  File "/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/nets/CYCLES_graph_classification/graph_transformer.py", line 84, in forward
    h = conv(g, h)
  File "/afs/crc.nd.edu/user/p/psoga/.conda/envs/gnn/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/layers/graph_transformer_layer.py", line 189, in forward
    attn_out = self.attention(g, h, spatial_pos_bias=spatial_pos_bias)
  File "/afs/crc.nd.edu/user/p/psoga/.conda/envs/gnn/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/layers/graph_transformer_layer.py", line 140, in forward
    self.propagate_attention(g, spatial_pos_bias)
  File "/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/layers/graph_transformer_layer.py", line 100, in propagate_attention
    g.apply_edges(src_dot_dst('K_h', 'Q_h', 'score'))
  File "/afs/crc.nd.edu/user/p/psoga/.conda/envs/gnn/lib/python3.10/site-packages/dgl/heterograph.py", line 4460, in apply_edges
    edata = core.invoke_edge_udf(g, eid, etype, func)
  File "/afs/crc.nd.edu/user/p/psoga/.conda/envs/gnn/lib/python3.10/site-packages/dgl/core.py", line 85, in invoke_edge_udf
    return func(ebatch)
  File "/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/layers/graph_transformer_layer.py", line 20, in func
    return {out_field: (edges.src[src_field] * edges.dst[dst_field])}
  File "/afs/crc.nd.edu/user/p/psoga/.conda/envs/gnn/lib/python3.10/site-packages/dgl/frame.py", line 523, in __getitem__
    return self._columns[name].data
  File "/afs/crc.nd.edu/user/p/psoga/.conda/envs/gnn/lib/python3.10/site-packages/dgl/frame.py", line 226, in data
    self.storage = F.gather_row(self.storage, self.index)
  File "/afs/crc.nd.edu/user/p/psoga/.conda/envs/gnn/lib/python3.10/site-packages/dgl/backend/pytorch/tensor.py", line 192, in gather_row
    return th.index_select(data, 0, row_index.long())
RuntimeError: CUDA out of memory. Tried to allocate 20.00 MiB (GPU 0; 10.92 GiB total capacity; 293.35 MiB already allocated; 6.44 MiB free; 326.00 MiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
