2022-10-04 00:41:14,241:main_utils.py:62 -            gpu_setup(): cuda available with GPU: NVIDIA GeForce GTX 1080 Ti
2022-10-04 00:41:31,985:main_CYCLES_graph_classification.py:356 -                 main(): {'num_train_data': 200, 'L': 10, 'n_heads': 8, 'hidden_dim': 80, 'out_dim': 80, 'residual': True, 'readout': 'sum', 'in_feat_dropout': 0.0, 'dropout': 0.0, 'layer_norm': False, 'batch_norm': True, 'self_loop': False, 'pos_enc': False, 'learned_pos_enc': False, 'pos_enc_dim': 32, 'wl_pos_enc': False, 'full_graph': True, 'gpu_id': 0, 'batch_size': 25, 'edge_feat': False, 'rand_pos_enc': True, 'rw_pos_enc': False, 'power_method': False, 'diag': False, 'pow_of_mat': 1, 'adj_enc': False, 'dataset': 'CYCLES', 'matrix_type': 'A', 'spectral_attn': False, 'cat_gape': False, 'gape_softmax_after': False, 'gape_softmax_before': False, 'gape_individual': False, 'random_orientation': False, 'gape_clamp': False, 'rand_sketchy_pos_enc': False, 'eigen_bartels_stewart': False, 'gape_rand': False, 'experiment_1': False, 'gape_normalization': False, 'gape_squash': 'none', 'gape_div': False, 'gape_norm': True, 'gape_symmetric': False, 'gape_weight_gen': False, 'cycles_k': '-1', 'log_file': '/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/tests/CYCLES_CYCLES/GraphTransformer/rand_pos_enc/b25-bnorm-alt-32-norm-vary-fg-trials/32_DEBUG_0_35.log', 'device': device(type='cuda'), 'in_dim': 1, 'in_dim_edge': 1, 'n_classes': 2, 'seed_array': [35]}
2022-10-04 00:41:31,985:main_CYCLES_graph_classification.py:357 -                 main(): {'seed': 41, 'epochs': 1000, 'batch_size': 25, 'init_lr': 0.0005, 'lr_reduce_factor': 0.5, 'lr_schedule_patience': 10, 'min_lr': 1e-06, 'weight_decay': 0.0, 'print_epoch_interval': 5, 'max_time': 24, 'seed_array': [35], 'job_num': 32}
2022-10-04 00:41:31,988:pe_layer.py:80 -             __init__(): rand_pos_enc
2022-10-04 00:41:40,570:pe_layer.py:226 -             __init__(): Using 32 dimension positional encoding (# states if an automata enc, otherwise smallest k eigvecs)
2022-10-04 00:41:40,570:pe_layer.py:231 -             __init__(): Using matrix: A
2022-10-04 00:41:40,570:pe_layer.py:232 -             __init__(): Matrix power: 1
2022-10-04 00:41:40,587:main_utils.py:76 -     view_model_param(): MODEL DETAILS:

2022-10-04 00:41:40,590:main_utils.py:81 -     view_model_param(): MODEL/Total parameters: GraphTransformer, 527414
2022-10-04 00:41:40,590:main_CYCLES_graph_classification.py:43 -   train_val_pipeline(): [!] Starting seed: 35 in [35]...
2022-10-04 00:41:40,590:pe_layer.py:80 -             __init__(): rand_pos_enc
2022-10-04 00:41:40,591:pe_layer.py:226 -             __init__(): Using 32 dimension positional encoding (# states if an automata enc, otherwise smallest k eigvecs)
2022-10-04 00:41:40,591:pe_layer.py:231 -             __init__(): Using matrix: A
2022-10-04 00:41:40,591:pe_layer.py:232 -             __init__(): Matrix power: 1
2022-10-04 00:41:40,612:main_CYCLES_graph_classification.py:76 -   train_val_pipeline(): [!] Adding random automaton graph positional encoding (32).
2022-10-04 00:42:41,729:main_CYCLES_graph_classification.py:84 -   train_val_pipeline(): Time PE:61.13923501968384
2022-10-04 00:42:41,730:main_CYCLES_graph_classification.py:105 -   train_val_pipeline(): [!] Converting the given graphs to full graphs..
