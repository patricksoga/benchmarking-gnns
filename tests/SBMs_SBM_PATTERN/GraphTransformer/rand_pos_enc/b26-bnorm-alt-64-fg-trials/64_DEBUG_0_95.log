2022-09-21 02:34:04,668:main_utils.py:62 -            gpu_setup(): cuda available with GPU: NVIDIA TITAN X (Pascal)
2022-09-21 02:34:22,807:main_SBMs_node_classification.py:385 -                 main(): {'L': 10, 'n_heads': 8, 'hidden_dim': 80, 'out_dim': 80, 'residual': True, 'readout': 'mean', 'in_feat_dropout': 0.0, 'dropout': 0.0, 'layer_norm': False, 'batch_norm': True, 'self_loop': False, 'wl_pos_enc': False, 'full_graph': True, 'gpu_id': 0, 'batch_size': 26, 'rand_pos_enc': True, 'rw_pos_enc': False, 'power_method': False, 'diag': False, 'pow_of_mat': 1, 'adj_enc': False, 'dataset': 'SBM_PATTERN', 'matrix_type': 'A', 'spectral_attn': False, 'cat_gape': False, 'gape_softmax_after': False, 'gape_softmax_before': False, 'gape_individual': False, 'random_orientation': False, 'gape_clamp': False, 'rand_sketchy_pos_enc': False, 'eigen_bartels_stewart': False, 'log_file': '/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/tests/SBMs_SBM_PATTERN/GraphTransformer/rand_pos_enc/b26-bnorm-alt-64-fg-trials/64_DEBUG_0_95.log', 'device': device(type='cuda'), 'pos_enc_dim': 64, 'in_dim': 3, 'n_classes': 2}
2022-09-21 02:34:22,807:main_SBMs_node_classification.py:386 -                 main(): {'seed': 41, 'epochs': 1000, 'batch_size': 26, 'init_lr': 0.0005, 'lr_reduce_factor': 0.5, 'lr_schedule_patience': 10, 'min_lr': 1e-06, 'weight_decay': 0.0, 'print_epoch_interval': 5, 'max_time': 24, 'seed_array': [95], 'job_num': 64}
2022-09-21 02:34:22,808:pe_layer.py:67 -             __init__(): rand_pos_enc
2022-09-21 02:34:24,079:pe_layer.py:132 -             __init__(): Using 64 dimension positional encoding (# states if an automata enc, otherwise smallest k eigvecs)
2022-09-21 02:34:24,079:pe_layer.py:137 -             __init__(): Using matrix: A
2022-09-21 02:34:24,079:pe_layer.py:138 -             __init__(): Matrix power: 1
2022-09-21 02:34:24,094:main_utils.py:76 -     view_model_param(): MODEL DETAILS:

2022-09-21 02:34:24,096:main_utils.py:81 -     view_model_param(): MODEL/Total parameters: GraphTransformer, 536262
2022-09-21 02:34:24,097:main_SBMs_node_classification.py:48 -   train_val_pipeline(): [!] Starting seed: 95 in [95]...
2022-09-21 02:34:24,097:pe_layer.py:67 -             __init__(): rand_pos_enc
2022-09-21 02:34:24,098:pe_layer.py:132 -             __init__(): Using 64 dimension positional encoding (# states if an automata enc, otherwise smallest k eigvecs)
2022-09-21 02:34:24,098:pe_layer.py:137 -             __init__(): Using matrix: A
2022-09-21 02:34:24,098:pe_layer.py:138 -             __init__(): Matrix power: 1
2022-09-21 02:34:24,120:main_SBMs_node_classification.py:91 -   train_val_pipeline(): [!] Adding random automaton graph positional encoding (64).
2022-09-21 02:36:27,724:main_SBMs_node_classification.py:99 -   train_val_pipeline(): Time PE:123.60454607009888
2022-09-21 02:36:27,732:main_SBMs_node_classification.py:144 -   train_val_pipeline(): [!] Converting the given graphs to full graphs..
2022-09-21 02:56:05,340:main_SBMs_node_classification.py:167 -   train_val_pipeline(): Training Graphs: 10000
2022-09-21 02:56:05,366:main_SBMs_node_classification.py:168 -   train_val_pipeline(): Validation Graphs: 2000
2022-09-21 02:56:05,400:main_SBMs_node_classification.py:169 -   train_val_pipeline(): Test Graphs: 2000
2022-09-21 02:56:05,438:main_SBMs_node_classification.py:170 -   train_val_pipeline(): Number of Classes: 2
2022-09-21 02:56:05,621:main_SBMs_node_classification.py:204 -   train_val_pipeline(): Epoch 1/1000
, 'diag': False, 'pow_of_mat': 1, 'adj_enc': False, 'dataset': 'SBM_PATTERN', 'matrix_type': 'A', 'spectral_attn': False, 'cat_gape': False, 'gape_softmax_after': False, 'gape_softmax_before': False, 'gape_individual': False, 'random_orientation': False, 'gape_clamp': False, 'rand_sketchy_pos_enc': False, 'eigen_bartels_stewart': False, 'log_file': '/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/tests/SBMs_SBM_PATTERN/GraphTransformer/rand_pos_enc/b26-bnorm-alt-64-fg-trials/64_DEBUG_0_95.log', 'device': device(type='cuda'), 'pos_enc_dim': 64, 'in_dim': 3, 'n_classes': 2}
2022-09-21 02:54:35,285:main_SBMs_node_classification.py:386 -                 main(): {'seed': 41, 'epochs': 1000, 'batch_size': 26, 'init_lr': 0.0005, 'lr_reduce_factor': 0.5, 'lr_schedule_patience': 10, 'min_lr': 1e-06, 'weight_decay': 0.0, 'print_epoch_interval': 5, 'max_time': 24, 'seed_array': [95], 'job_num': 64}
2022-09-21 02:54:35,285:pe_layer.py:67 -             __init__(): rand_pos_enc
2022-09-21 02:54:36,595:pe_layer.py:132 -             __init__(): Using 64 dimension positional encoding (# states if an automata enc, otherwise smallest k eigvecs)
2022-09-21 02:54:36,595:pe_layer.py:137 -             __init__(): Using matrix: A
2022-09-21 02:54:36,595:pe_layer.py:138 -             __init__(): Matrix power: 1
2022-09-21 02:54:36,611:main_utils.py:76 -     view_model_param(): MODEL DETAILS:

2022-09-21 02:54:36,614:main_utils.py:81 -     view_model_param(): MODEL/Total parameters: GraphTransformer, 536262
2022-09-21 02:54:36,614:main_SBMs_node_classification.py:48 -   train_val_pipeline(): [!] Starting seed: 95 in [95]...
2022-09-21 02:54:36,614:pe_layer.py:67 -             __init__(): rand_pos_enc
2022-09-21 02:54:36,615:pe_layer.py:132 -             __init__(): Using 64 dimension positional encoding (# states if an automata enc, otherwise smallest k eigvecs)
2022-09-21 02:54:36,616:pe_layer.py:137 -             __init__(): Using matrix: A
2022-09-21 02:54:36,616:pe_layer.py:138 -             __init__(): Matrix power: 1
2022-09-21 02:54:36,639:main_SBMs_node_classification.py:91 -   train_val_pipeline(): [!] Adding random automaton graph positional encoding (64).
2022-09-21 02:56:43,429:main_SBMs_node_classification.py:99 -   train_val_pipeline(): Time PE:126.7894537448883
2022-09-21 02:56:55,930:main_SBMs_node_classification.py:144 -   train_val_pipeline(): [!] Converting the given graphs to full graphs..
