/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/main_PLANARITY_graph_classification.py:383: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  num_classes = len(np.unique(np.array(dataset.train[:][1])))
/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/main_PLANARITY_graph_classification.py:383: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  num_classes = len(np.unique(np.array(dataset.train[:][1])))
cuda available with GPU: NVIDIA GeForce GTX 1080 Ti
[I] Loading dataset Planarity...
train, test, val sizes : 7000 1500 1500
[I] Finished loading.
[I] Data load time: 6.6473s
MODEL DETAILS:

MODEL/Total parameters: GraphTransformer 550692
Training Graphs:  7000
Validation Graphs:  1500
Test Graphs:  1500
Number of Classes:  2
  0%|          | 0/1000 [00:00<?, ?it/s]Epoch 0:   0%|          | 0/1000 [00:00<?, ?it/s]Epoch 0:   0%|          | 0/1000 [00:32<?, ?it/s]
Traceback (most recent call last):
  File "/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/train/train_PLANARITY_graph_classification.py", line 27, in train_epoch_sparse
    batch_pos_enc = batch_graphs.ndata['pos_enc'].to(device)
  File "/afs/crc.nd.edu/user/p/psoga/.conda/envs/gnn/lib/python3.10/site-packages/dgl/view.py", line 67, in __getitem__
    return self._graph._get_n_repr(self._ntid, self._nodes)[key]
  File "/afs/crc.nd.edu/user/p/psoga/.conda/envs/gnn/lib/python3.10/site-packages/dgl/frame.py", line 523, in __getitem__
    return self._columns[name].data
KeyError: 'pos_enc'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/main_PLANARITY_graph_classification.py", line 420, in <module>
    main()    
  File "/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/main_PLANARITY_graph_classification.py", line 415, in main
    train_val_pipeline(MODEL_NAME, dataset, params, net_params, dirs)
  File "/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/main_PLANARITY_graph_classification.py", line 157, in train_val_pipeline
    epoch_train_loss, epoch_train_acc, optimizer = train_epoch(model, optimizer, device, train_loader, epoch)
  File "/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/train/train_PLANARITY_graph_classification.py", line 33, in train_epoch_sparse
    batch_scores = model.forward(batch_graphs, batch_x, batch_e)
  File "/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/nets/PLANARITY_graph_classification/graph_transformer.py", line 90, in forward
    encs = torch.linalg.solve(B, vec_init)
torch._C._LinAlgError: linalg.solve: The diagonal element 690 is zero, the solve could not be completed because the input matrix is singular.
