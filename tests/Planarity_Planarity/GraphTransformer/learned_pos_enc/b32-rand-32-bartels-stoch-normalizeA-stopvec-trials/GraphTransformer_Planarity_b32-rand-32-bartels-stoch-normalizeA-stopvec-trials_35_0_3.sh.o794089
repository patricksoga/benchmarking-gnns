/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/main_Planarity_graph_classification.py:297: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  num_classes = len(np.unique(np.array(dataset.train[:][1])))
/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/main_Planarity_graph_classification.py:297: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  num_classes = len(np.unique(np.array(dataset.train[:][1])))
[I] Loading dataset Planarity...
train, test, val sizes : 7000 1500 1500
[I] Finished loading.
[I] Data load time: 6.5448s
Traceback (most recent call last):
  File "/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/train/train_PLANARITY_graph_classification.py", line 50, in train_epoch_sparse
    batch_scores = model.forward(batch_graphs, batch_x, batch_e)
  File "/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/nets/PLANARITY_graph_classification/graph_transformer.py", line 61, in forward
    pe = self.pe_layer(g, h, pos_enc)
  File "/afs/crc.nd.edu/user/p/psoga/.conda/envs/gnn/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/layers/pe_layer.py", line 373, in forward
    encs = torch.linalg.solve(B, vec_init)
RuntimeError: CUDA out of memory. Tried to allocate 3.23 GiB (GPU 0; 10.92 GiB total capacity; 9.69 GiB already allocated; 557.44 MiB free; 9.71 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/main_Planarity_graph_classification.py", line 321, in <module>
    main()    
  File "/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/main_Planarity_graph_classification.py", line 319, in main
    train_val_pipeline(MODEL_NAME, dataset, params, net_params, dirs)
  File "/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/main_Planarity_graph_classification.py", line 140, in train_val_pipeline
    epoch_train_loss, epoch_train_acc, optimizer = train_epoch(model, optimizer, device, train_loader, epoch, MODEL_NAME)
  File "/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/train/train_PLANARITY_graph_classification.py", line 56, in train_epoch_sparse
    batch_scores = model.forward(batch_graphs, batch_x, batch_e)
  File "/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/nets/PLANARITY_graph_classification/graph_transformer.py", line 61, in forward
    pe = self.pe_layer(g, h, pos_enc)
  File "/afs/crc.nd.edu/user/p/psoga/.conda/envs/gnn/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/afs/crc.nd.edu/user/p/psoga/benchmarking-gnns/layers/pe_layer.py", line 372, in forward
    B = torch.eye(kron_prod.shape[1]).to(self.device) - kron_prod
RuntimeError: CUDA out of memory. Tried to allocate 3.23 GiB (GPU 0; 10.92 GiB total capacity; 9.70 GiB already allocated; 557.44 MiB free; 9.71 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
